{
	"information_for_contributors": [
		"This file has been converted from https://github.com/atom/language-java/blob/master/grammars/java.cson",
		"If you want to provide a fix or improvement, please create a pull request against the original repository.",
		"Once accepted there, we are happy to receive an update request."
	],
	"version": "https://github.com/atom/language-java/commit/b9f1a853a69184363b0fb15f52da07c9660bf730",
	"name": "Java",
	"scopeName": "source.java",
	"patterns": [
		{
			"begin": "\\b(package)\\b\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.package.java"
				}
			},
			"end": "\\s*;",
			"name": "meta.package.java",
			"contentName": "storage.modifier.package.java",
			"patterns": [
				{
					"include": "#comments"
				}
			]
		},
		{
			"begin": "\\b(import)\\b\\s*\\b(static)?\\b\\s",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.import.java"
				},
				"2": {
					"name": "storage.modifier.java"
				}
			},
			"end": "\\s*;",
			"name": "meta.import.java",
			"contentName": "entity.name.type.import.java",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"match": "\\.",
					"name": "punctuation.separator.java"
				},
				{
					"match": "\\*",
					"name": "variable.language.wildcard.java"
				}
			]
		},
		{
			"include": "#comments-javadoc"
		},
		{
			"include": "#code"
		},
		{
			"include": "#module"
		}
	],
	"repository": {
		"all-types": {
			"patterns": [
				{
					"include": "#primitive-arrays"
				},
				{
					"include": "#primitive-types"
				},
				{
					"include": "#object-types"
				}
			]
		},
		"annotations": {
			"patterns": [
				{
					"match": "(@interface)\\s+(\\w+)",
					"name": "meta.declaration.annotation.java",
					"captures": {
						"1": {
							"name": "storage.modifier.java"
						},
						"2": {
							"name": "entity.name.type.annotation.java"
						}
					}
				},
				{
					"begin": "(@[^\\s(]+)(\\()",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.tag"
						},
						"2": {
							"name": "punctuation.definition.tag.left"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.tag.right"
						}
					},
					"name": "meta.declaration.annotation.java",
					"patterns": [
						{
							"captures": {
								"1": {
									"name": "punctuation.definition.tag.key"
								},
								"2": {
									"name": "punctuation.definition.tag.assign"
								}
							},
							"match": "(\\w*)\\s*(=)"
						},
						{
							"include": "#code"
						}
					]
				},
				{
					"match": "@\\w+",
					"name": "punctuation.definition.tag"
				}
			]
		},
		"anonymous-classes-and-new": {
			"begin": "\\bnew\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.new.java"
				}
			},
			"end": "(?=;|\\)|,|:|}|\\+)",
			"name": "meta.new.java",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#all-types"
				},
				{
					"begin": "(?<!\\])\\s*{",
					"end": "}",
					"name": "meta.inner-class.java",
					"patterns": [
						{
							"include": "#class-body"
						}
					]
				},
				{
					"include": "#parens"
				}
			]
		},
		"assertions": {
			"patterns": [
				{
					"begin": "\\b(assert)\\s",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.assert.java"
						}
					},
					"end": "$",
					"name": "meta.declaration.assertion.java",
					"patterns": [
						{
							"match": ":",
							"name": "keyword.operator.assert.expression-separator.java"
						},
						{
							"include": "#code"
						}
					]
				}
			]
		},
		"class": {
			"begin": "(?=\\w?[\\w\\s]*(?:class|(?<!@)interface|enum)\\s+\\w+)",
			"end": "}",
			"name": "meta.class.java",
			"patterns": [
				{
					"include": "#storage-modifiers"
				},
				{
					"include": "#generics"
				},
				{
					"include": "#comments"
				},
				{
					"captures": {
						"1": {
							"name": "storage.modifier.java"
						},
						"2": {
							"name": "entity.name.type.class.java"
						}
					},
					"match": "(class|(?<!@)interface|enum)\\s+(\\w+)",
					"name": "meta.class.identifier.java"
				},
				{
					"begin": "extends",
					"beginCaptures": {
						"0": {
							"name": "storage.modifier.extends.java"
						}
					},
					"end": "(?={|implements)",
					"name": "meta.definition.class.inherited.classes.java",
					"patterns": [
						{
							"include": "#object-types-inherited"
						},
						{
							"include": "#comments"
						}
					]
				},
				{
					"begin": "(implements)\\s",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.implements.java"
						}
					},
					"end": "(?=\\s*extends|\\{)",
					"name": "meta.definition.class.implemented.interfaces.java",
					"patterns": [
						{
							"include": "#object-types-inherited"
						},
						{
							"include": "#comments"
						}
					]
				},
				{
					"begin": "{",
					"end": "(?=})",
					"contentName": "meta.class.body.java",
					"patterns": [
						{
							"include": "#class-body"
						}
					]
				}
			]
		},
		"class-body": {
			"patterns": [
				{
					"include": "#comments-javadoc"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#class"
				},
				{
					"include": "#enums"
				},
				{
					"include": "#generics"
				},
				{
					"include": "#static-initializer"
				},
				{
					"include": "#methods"
				},
				{
					"include": "#annotations"
				},
				{
					"include": "#member-variables"
				},
				{
					"include": "#storage-modifiers"
				},
				{
					"include": "#code"
				}
			]
		},
		"anonymous-block-and-instance-initializer": {
			"begin": "{",
			"end": "}",
			"name": "meta.block.java",
			"patterns": [
				{
					"include": "#code"
				}
			]
		},
		"static-initializer": {
			"patterns": [
				{
					"include": "#anonymous-block-and-instance-initializer"
				},
				{
					"match": "static",
					"name": "storage.modifier.java"
				}
			]
		},
		"code": {
			"patterns": [
				{
					"include": "#annotations"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#enums"
				},
				{
					"include": "#class"
				},
				{
					"include": "#anonymous-block-and-instance-initializer"
				},
				{
					"include": "#try"
				},
				{
					"include": "#try-with-resources"
				},
				{
					"include": "#catch"
				},
				{
					"include": "#assertions"
				},
				{
					"include": "#parens"
				},
				{
					"include": "#constants-and-special-vars"
				},
				{
					"include": "#numbers"
				},
				{
					"include": "#anonymous-classes-and-new"
				},
				{
					"include": "#lambda-expression"
				},
				{
					"include": "#keywords"
				},
				{
					"include": "#storage-modifiers"
				},
				{
					"include": "#properties"
				},
				{
					"include": "#variables"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#all-types"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"match": "/\\*\\*/",
					"name": "comment.block.empty.java"
				},
				{
					"include": "text.html.javadoc"
				},
				{
					"include": "#comments-inline"
				}
			]
		},
		"comments-inline": {
			"patterns": [
				{
					"begin": "/\\*",
					"end": "\\*/",
					"name": "comment.block.java"
				},
				{
					"begin": "(^[ \\t]+)?(?=//)",
					"end": "(?!\\G)",
					"patterns": [
						{
							"begin": "//",
							"end": "\\n",
							"name": "comment.line.double-slash.java"
						}
					]
				}
			]
		},
		"comments-javadoc": {
			"patterns": [
				{
					"begin": "^\\s*/\\*\\*(?!/)",
					"end": "\\*/",
					"name": "comment.block.javadoc.java",
					"patterns": [
						{
							"match": "@(author|deprecated|return|see|serial|since|version)\\b",
							"name": "keyword.other.documentation.javadoc.java"
						},
						{
							"match": "(@param)\\s+(\\S+)",
							"captures": {
								"1": {
									"name": "keyword.other.documentation.javadoc.java"
								},
								"2": {
									"name": "variable.parameter.java"
								}
							}
						},
						{
							"match": "(@(?:exception|throws))\\s+(\\S+)",
							"captures": {
								"1": {
									"name": "keyword.other.documentation.javadoc.java"
								},
								"2": {
									"name": "entity.name.type.class.java"
								}
							}
						},
						{
							"match": "{(@link)\\s+(\\S+)?#([\\w$]+\\s*\\([^\\(\\)]*\\)).*}",
							"captures": {
								"1": {
									"name": "keyword.other.documentation.javadoc.java"
								},
								"2": {
									"name": "entity.name.type.class.java"
								},
								"3": {
									"name": "variable.parameter.java"
								}
							}
						}
					]
				}
			]
		},
		"try": {
			"match": "\\b(try)\\b\\s*(?={)",
			"captures": {
				"1": "keyword.control.try.java"
			}
		},
		"try-with-resources": {
			"begin": "\\b(try)\\b\\s*\\(",
			"end": "(?={)",
			"name": "meta.try-with-resources.java",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.try.java"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"match": "([a-zA-Z$_][\\.a-zA-Z0-9$_]*)\\s*(\\w+)?",
					"captures": {
						"1": {
							"name": "entity.name.type.java"
						},
						"2": {
							"name": "variable.parameter.java"
						}
					}
				}
			]
		},
		"catch": {
			"begin": "\\b(catch)\\b",
			"end": "(?={)",
			"name": "meta.catch.java",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.catch.java"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"match": "([a-zA-Z$_][\\.a-zA-Z0-9$_]*)\\s*(\\w+)?",
					"captures": {
						"1": {
							"name": "entity.name.type.java"
						},
						"2": {
							"name": "variable.parameter.java"
						}
					}
				}
			]
		},
		"constants-and-special-vars": {
			"patterns": [
				{
					"match": "\\b(true|false|null)\\b",
					"name": "constant.language.java"
				},
				{
					"match": "\\bthis\\b",
					"name": "variable.language.this.java"
				},
				{
					"match": "\\bsuper\\b",
					"name": "variable.language.java"
				}
			]
		},
		"generics": {
			"begin": "<",
			"end": ">",
			"patterns": [
				{
					"match": "\\b(extends|super)\\b",
					"name": "storage.modifier.$1.java"
				},
				{
					"match": "(?<!\\.)([a-zA-Z$_][a-zA-Z0-9$_]*)(?=\\s*<)",
					"captures": {
						"1": {
							"name": "entity.name.type.java"
						}
					}
				},
				{
					"include": "#primitive-arrays"
				},
				{
					"match": "[a-zA-Z$_][a-zA-Z0-9$_]*",
					"name": "entity.name.type.generic.java"
				},
				{
					"match": "\\?",
					"name": "storage.type.generic.wildcard.java"
				},
				{
					"include": "#parens"
				},
				{
					"include": "#generics"
				},
				{
					"include": "#comments"
				}
			]
		},
		"enums": {
			"begin": "^\\s*(enum)\\s+(\\w+)",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.java"
				},
				"2": {
					"name": "entity.name.type.enum.java"
				}
			},
			"end": "}",
			"name": "meta.enum.java",
			"patterns": [
				{
					"begin": "{",
					"end": "(?=})",
					"patterns": [
						{
							"match": "\\w+",
							"name": "constant.other.enum.java"
						},
						{
							"include": "#class-body"
						}
					]
				},
				{
					"include": "#comments"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"match": "\\bthrow\\b",
					"name": "keyword.control.throw.java"
				},
				{
					"match": "\\?|:",
					"name": "keyword.control.ternary.java"
				},
				{
					"match": "\\b(return|break|case|continue|default|do|while|for|switch|if|else|finally)\\b",
					"name": "keyword.control.java"
				},
				{
					"match": "\\b(instanceof)\\b",
					"name": "keyword.operator.instanceof.java"
				},
				{
					"match": "(<<|>>>?|~|\\^)",
					"name": "keyword.operator.bitwise.java"
				},
				{
					"match": "((&|\\^|\\||<<|>>>?)=)",
					"name": "keyword.operator.assignment.bitwise.java"
				},
				{
					"match": "(===?|!=|<=|>=|<>|<|>)",
					"name": "keyword.operator.comparison.java"
				},
				{
					"match": "([+*/%-]=)",
					"name": "keyword.operator.assignment.arithmetic.java"
				},
				{
					"match": "(=)",
					"name": "keyword.operator.assignment.java"
				},
				{
					"match": "(\\-\\-|\\+\\+)",
					"name": "keyword.operator.increment-decrement.java"
				},
				{
					"match": "(\\-|\\+|\\*|\\/|%)",
					"name": "keyword.operator.arithmetic.java"
				},
				{
					"match": "(!|&&|\\|\\|)",
					"name": "keyword.operator.logical.java"
				},
				{
					"match": "(\\||&)",
					"name": "keyword.operator.bitwise.java"
				},
				{
					"match": "\\b(const|goto)\\b",
					"name": "keyword.reserved.java"
                }
			]
		},
		"lambda-expression": {
			"patterns": [
				{
					"match": "->",
					"name": "storage.type.function.arrow.java"
				}
			]
		},
		"methods": {
			"begin": "(?!new)(?=[\\w<].*\\s+)(?=([^=/]|/(?!/))+\\()",
			"end": "}|(?=;)",
			"name": "meta.method.java",
			"patterns": [
				{
					"include": "#storage-modifiers"
				},
				{
					"begin": "(\\w+)\\s*\\(",
					"beginCaptures": {
						"1": {
							"name": "variable.other.method.declaration.java"
						}
					},
					"end": "\\)",
					"name": "meta.method.identifier.java",
					"patterns": [
						{
							"include": "#parameters"
						},
						{
							"include": "#parens"
						},
						{
							"include": "#comments-inline"
						}
					]
				},
				{
					"include": "#generics"
				},
				{
					"begin": "(?=\\w.*\\s+\\w+\\s*\\()",
					"end": "(?=\\s+\\w+\\s*\\()",
					"name": "meta.method.return-type.java",
					"patterns": [
						{
							"include": "#all-types"
						},
						{
							"include": "#parens"
						}
					]
				},
				{
					"include": "#throws"
				},
				{
					"begin": "{",
					"end": "(?=})",
					"contentName": "meta.method.body.java",
					"patterns": [
						{
							"include": "#code"
						}
					]
				},
				{
					"include": "#comments"
				}
			]
		},
		"module": {
			"begin": "((open)\\s)?(module)\\s+(\\w+)",
			"end": "}",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.java"
				},
				"3": {
					"name": "storage.modifier.java"
				},
				"4": {
					"name": "entity.name.type.module.java"
				}
			},
			"name": "meta.module.java",
			"patterns": [
				{
					"begin": "{",
					"end": "(?=})",
					"contentName": "meta.module.body.java",
					"patterns": [
						{
							"match": "\\b(requires|transitive|exports|opens|to|uses|provides|with)\\b",
							"name": "keyword.module.java"
						}
					]
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"match": "(?x)\n\\b(?<!\\$)\n0(x|X)\n(\n  (?<!\\.)[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?[Ll]?(?!\\.)\n  |\n  (\n    [0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?\\.?\n    |\n    ([0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?)?\\.[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?\n  )\n  [Pp][+-]?[0-9]([0-9_]*[0-9])?[FfDd]?\n)\n\\b(?!\\$)",
					"name": "constant.numeric.hex.java"
				},
				{
					"match": "\\b(?<!\\$)0(b|B)[01]([01_]*[01])?[Ll]?\\b(?!\\$)",
					"name": "constant.numeric.binary.java"
				},
				{
					"match": "\\b(?<!\\$)0[0-7]([0-7_]*[0-7])?[Ll]?\\b(?!\\$)",
					"name": "constant.numeric.octal.java"
				},
				{
					"match": "(?x)\n(?<!\\$)\n(\n  \\b[0-9]([0-9_]*[0-9])?\\.\\B(?!\\.)\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  (?<!\\.)\\B\\.[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b(0|[1-9]([0-9_]*[0-9])?)(?!\\.)[Ll]?\\b\n)\n(?!\\$)",
					"name": "constant.numeric.decimal.java"
				}
			]
		},
		"object-types": {
			"patterns": [
				{
					"include": "#generics"
				},
				{
					"begin": "\\b(?:[A-Z]\\w*\\s*\\.\\s*)*([A-Z]\\w*)\\s*(?=\\[)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.type.object.array.java"
						}
					},
					"end": "(?!\\s*\\[)",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#parens"
						}
					]
				},
				{
					"begin": "\\b((?:[A-Z]\\w*\\s*\\.\\s*)*[A-Z]\\w*)\\s*(?=<)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.type.java"
						}
					},
					"end": "(?<=>)|(?!;)",
					"patterns": [
						{
							"include": "#generics"
						}
					]
				},
				{
					"match": "\\b(?:[A-Z]\\w*\\s*\\.\\s*)*[A-Z]\\w*\\b",
					"name": "entity.name.type.java"
				}
			]
		},
		"object-types-inherited": {
			"patterns": [
				{
					"include": "#generics"
				},
				{
					"match": "\\b(?:[A-Z]\\w*\\s*\\.\\s*)*[A-Z]\\w*\\b",
					"name": "entity.other.inherited-class.java"
				}
			]
		},
		
		"parameters": {
			"patterns": [
				{
					"match": "\\bfinal\\b",
					"name": "storage.modifier.java"
				},
				{
					"include": "#annotations"
				},
				{
					"include": "#all-types"
				},
				{
					"include": "#strings"
				},
				{
					"match": "\\w+",
					"name": "variable.parameter.java"
				}
			]
		},
		"parens": {
			"patterns": [
				{
					"begin": "\\(",
					"end": "\\)",
					"patterns": [
						{
							"include": "#code"
						}
					]
				},
				{
					"begin": "\\[",
					"end": "\\]",
					"patterns": [
						{
							"include": "#code"
						}
					]
				},
				{
					"begin": "{",
					"end": "}",
					"patterns": [
						{
							"include": "#code"
						}
					]
				}
			]
		},
		"primitive-arrays": {
			"patterns": [
				{
					"begin": "\\b(void|boolean|byte|char|short|int|float|long|double)\\b\\s*(?=\\[)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.primitive.array.java"
						}
					},
					"end": "(?!\\s*\\[)",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#parens"
						}
					]
				}
			]
		},
		"primitive-types": {
			"match": "\\b(void|boolean|byte|char|short|int|float|long|double|var)\\b",
			"name": "storage.type.primitive.java"
		},
		"properties": {
			"patterns": [
				{
					"match": "\\.\\s*([a-zA-Z_$][\\w$]*)(?=\\s*\\.\\s*[a-zA-Z_$][\\w$]*)"
				},
				{
					"match": "\\.\\s*([a-zA-Z_$][\\w$]*)"
				}
			]
		},
		"storage-modifiers": {
			"match": "\\b(public|private|protected|static|final|native|synchronized|abstract|threadsafe|transient|volatile|default|strictfp)\\b",
			"name": "storage.modifier.java"
		},
		"strings": {
			"patterns": [
				{
					"begin": "\"",
					"end": "\"",
					"name": "string.quoted.double.java",
					"patterns": [
						{
							"match": "\\\\.",
							"name": "constant.character.escape.java"
						}
					]
				},
				{
					"begin": "'",
					"end": "'",
					"name": "string.quoted.single.java",
					"patterns": [
						{
							"match": "\\\\.",
							"name": "constant.character.escape.java"
						}
					]
				}
			]
		},
		"throws": {
			"begin": "throws",
			"beginCaptures": {
				"0": {
					"name": "storage.modifier.java"
				}
			},
			"end": "(?={|;)",
			"name": "meta.throwables.java",
			"patterns": [
				{
					"match": "[a-zA-Z$_][\\.a-zA-Z0-9$_]*",
					"name": "entity.name.type.java"
				}
			]
		},
		"variables": {
			"begin": "(void|boolean|byte|char|short|int|float|long|double|var|(\\w+\\.)*\\w+)(<[\\w<>,\\.?\\s\\[\\]]*)?(\\[\\])*\\s+(?=\\w+)",
			"end": "(?=;)",
			"name": "meta.definition.variable.java",
			"beginCaptures": {
				"1": {
					"name": "entity.name.type.variable.java"
				},
				"3": {
					"patterns": [
						{
							"include": "#generics"
						}
					]
				}
			},
			"patterns": [
				{
					"begin": "(\\w+)(\\[\\])*\\s*(=)",
					"end": "(?=[;,])",
					"beginCaptures": {
						"1": {
							"name": "variable.other.declaration.java"
						},
						"3": {
							"name": "keyword.operator.assignment.java"
						}
					},
					"name": "meta.definition.initializer.java",
					"patterns": [
						{
							"include": "#code"
						}
					]
				}
			]
		},
		"member-variables": {
			"begin": "(?=private|protected|public|native|synchronized|abstract|threadsafe|transient|static|final)",
			"end": "(?=;)",
			"patterns": [
				{
					"include": "#storage-modifiers"
				},
				{
					"include": "#variables"
				},
				{
					"include": "#primitive-arrays"
				},
				{
					"include": "#object-types"
				}
			]
		}
	}
}